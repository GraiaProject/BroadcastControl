[tool.poetry]
name = "graia-broadcast"
version = "0.17.3"
description = "a highly customizable, elegantly designed event system based on asyncio"
authors = ["GreyElaina <GreyElaina@outlook.com>"]
license = "MIT"
packages = [{ include = "graia", from = "src" }]

[tool.poetry.dependencies]
python = "^3.7"
typing-extensions = { version = ">=3.10.0", python = "<3.9" }

[tool.poetry.dev-dependencies]
black = "^22.1.0"
pre-commit = "*"
flake8 = "^4.0.1"
isort = "^5.10.1"
pytest = "^7.0.1"
coverage = "^6.3.2"
pytest-asyncio = "^0.18.2"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.black]
line-length = 120

[tool.isort]
profile = "black"

[[tool.poetry.source]]
name = "tunapypi"
default = true
url = "https://pypi.tuna.tsinghua.edu.cn/simple/"

[tool.coverage.run]
branch = true
omit = ["*/test/*"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # standard pragma
    "pragma: no cover",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if (typing\\.)?TYPE_CHECKING( is True)?:",
    "\\.\\.\\.",
    "pass",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    # Don't complain overload method / functions
    "@(typing\\.)?overload",
    # don't complain __repr__ and __str__ and __repr_args__ for representation
    "def __repr__",
    "def __str__",
    "def __repr_args__",
]
